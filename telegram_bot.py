import os
import requests
from dotenv import load_dotenv
from gradio_client import Client
from PIL import Image
import logging
from datetime import datetime
import sys

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('combined_app.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

class Config:
    OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
    HF_TOKEN = os.getenv("HF_TOKEN")
    MODEL = os.getenv('MODEL', "qwen/qwen3-14b:free")
    IMAGE_MODEL = os.getenv('IMAGE_MODEL', "black-forest-labs/FLUX.1-schnell")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
INPUT_FILENAME = "input.txt"
OUTPUT_DIR = "images"
IMAGE_PROMPTS_FILE = "image_prompts.txt"
BACKUP_IMAGE_MODELS = [
    "black-forest-labs/FLUX.1-dev",
    "multimodalart/FLUX.1-merged",
    "runwayml/stable-diffusion-v1-5"
]

def setup_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    try:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        
        if not os.path.exists(INPUT_FILENAME):
            with open(INPUT_FILENAME, 'w', encoding='utf-8') as f:
                f.write("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞\n")
                logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {INPUT_FILENAME}")
                
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['OPENROUTER_API_KEY', 'TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHANNEL_ID', 'HF_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        error_msg = f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}"
        logging.error(error_msg)
        raise ValueError(error_msg)
    
    logging.info("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def format_for_telegram(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram"""
    if not text:
        return ""
    
    replacements = {
        "```markdown": "",
        "```": "",
        "*": "",
        "_": "",
        "`": "",
        "\\[\\!\\[\\]": ""  # –£–¥–∞–ª–µ–Ω–∏–µ markdown –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    }
    
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    return text.strip()

def read_queries(file_path=INPUT_FILENAME):
    """–ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            queries = [line.strip() for line in file if line.strip()]
            
        if not queries:
            logging.warning(f"–§–∞–π–ª {file_path} –ø—É—Å—Ç")
            return []
            
        logging.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(queries)} –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        return queries
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return []

def remove_first_prompt():
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(INPUT_FILENAME, "r", encoding="utf-8") as f:
            lines = f.readlines()
        
        if not lines:
            logging.info("–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—É—Å—Ç - –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å")
            return False
        
        with open(INPUT_FILENAME, "w", encoding="utf-8") as f:
            f.writelines(lines[1:])
        
        remaining = len(lines) - 1
        logging.info(f"–£–¥–∞–ª–µ–Ω –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–ø—Ç. –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")
        return True
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        return False

def get_ai_response(query, max_retries=3):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò —á–µ—Ä–µ–∑ OpenRouter"""
    for attempt in range(1, max_retries + 1):
        try:
            headers = {
                "Authorization": f"Bearer {Config.OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }

            data = {
                "model": Config.MODEL,
                "messages": [
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã - –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞. "
                            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–ª–∏–Ω–æ–π 500‚Äì700 —Å–∏–º–≤–æ–ª–æ–≤. "
                            "–î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏, —Ö—ç—à—Ç–µ–≥–∏ –∏ —Å–¥–µ–ª–∞–π –µ–≥–æ –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–º. "
                            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown."
                        )
                    },
                    {
                        "role": "user",
                        "content": query
                    }
                ],
                "max_tokens": 1000,
                "temperature": 0.75
            }

            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            )

            if response.status_code == 200:
                answer = response.json()['choices'][0]['message']['content'].strip()
                logging.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                return format_for_telegram(answer)

            logging.warning(f"–û—à–∏–±–∫–∞ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {response.status_code} - {response.text}")
            
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    return f"üìå {query}\n\n–ö–æ–Ω—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def save_prompt_to_file(prompt):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    try:
        os.makedirs(os.path.dirname(IMAGE_PROMPTS_FILE) or '.', exist_ok=True)
        with open(IMAGE_PROMPTS_FILE, "a", encoding="utf-8") as f:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"{timestamp} - {prompt}\n\n")
        logging.info("–ü—Ä–æ–º—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞: {e}")
        return False

def generate_image_prompt(post_text, max_retries=3):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    for attempt in range(1, max_retries + 1):
        try:
            headers = {
                "Authorization": f"Bearer {Config.OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }

            user_content = (
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ "
                "–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–¥–∞—Å—Ç –µ–≥–æ —Å–º—ã—Å–ª –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.\n\n"
                f"{post_text}\n\n"
                "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–∞–¥–ø–∏—Å–µ–π, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ."
            )

            data = {
                "model": Config.MODEL,
                "messages": [
                    {
                        "role": "system",
                        "content": (
                            "You are an expert prompt engineer for AI image generation. "
                            "Create detailed, vivid prompts in English that perfectly capture "
                            "the essence of the provided text. Focus on visual storytelling."
                        )
                    },
                    {
                        "role": "user",
                        "content": user_content
                    }
                ],
                "max_tokens": 1000,
                "temperature": 0.5
            }

            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            )

            if response.status_code == 200:
                result = response.json()
                if 'choices' in result and len(result['choices']) > 0:
                    prompt = result['choices'][0]['message']['content'].strip()
                    if prompt:
                        prompt = prompt.replace('"', '').replace("'", "")
                        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt[:100]}...")
                        save_prompt_to_file(prompt)
                        return prompt

            logging.warning(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {response.status_code}")

        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

    default_prompt = (
        "modern digital art, trending on artstation, ultra-detailed, "
        "vibrant colors, professional composition, social media style, "
        "eye-catching visual, 8k resolution"
    )
    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º—Ç: {default_prompt}")
    save_prompt_to_file(default_prompt)
    return default_prompt

def get_working_image_model():
    """–ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    model_list = [Config.IMAGE_MODEL] if Config.IMAGE_MODEL else []
    model_list.extend(BACKUP_IMAGE_MODELS)
    
    for model in model_list:
        try:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–¥–µ–ª–∏: {model}")
            client = Client(model, hf_token=Config.HF_TOKEN)
            logging.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏: {model}")
            return client, model
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–¥–µ–ª–∏ {model}: {e}")
            continue
    
    raise ValueError("–ù–∏ –æ–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!")

def generate_image(client, prompt, model_name):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º—Ç—É"""
    try:
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–æ–¥–µ–ª—å—é: {model_name}")
        
        if "FLUX.1-schnell" in model_name:
            result = client.predict(
                prompt=prompt,
                api_name="/infer"
            )
        else:
            result = client.predict(
                prompt=prompt,
                seed=0,
                width=1024,
                height=1024,
                guidance_scale=3.5,
                num_inference_steps=28,
                api_name="/infer"
            )
        
        if result and len(result) > 0:
            logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return result[0]
            
        logging.error("–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return None
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def save_image(temp_path, prompt):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫"""
    try:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        
        safe_prompt = "".join(
            c for c in prompt[:30] 
            if c.isalnum() or c in " _-"
        ).rstrip()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = os.path.join(OUTPUT_DIR, f"{timestamp}_{safe_prompt}.png")
        
        with Image.open(temp_path) as img:
            img.save(output_path, "PNG", quality=95)
        
        logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        return output_path
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def send_post_with_image_to_telegram(text, image_path):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{Config.TELEGRAM_BOT_TOKEN}/sendPhoto"
        
        with open(image_path, "rb") as photo:
            files = {"photo": photo}
            data = {"chat_id": Config.TELEGRAM_CHANNEL_ID, "caption": text[:1024]}
            response = requests.post(url, files=files, data=data, timeout=30)
            
            if response.status_code == 200:
                logging.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                return True
                
            logging.error(f"–û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        logging.info("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===")
        setup()
        setup_environment()
        
        queries = read_queries()
        if not queries:
            logging.error("–ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
            
        query = queries[0]
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞: {query[:50]}...")
        
        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
        post_text = get_ai_response(query)
        if not post_text:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
            return
            
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ ({len(post_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_prompt = generate_image_prompt(post_text)
        if not image_prompt:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
            
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            client, model_name = get_working_image_model()
            temp_image_path = generate_image(client, image_prompt, model_name)
            
            if not temp_image_path or not os.path.exists(temp_image_path):
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
                
            final_image_path = save_image(temp_image_path, image_prompt)
            
            if not final_image_path:
                return
                
            # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
            if send_post_with_image_to_telegram(post_text, final_image_path):
                remove_first_prompt()
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}", exc_info=True)
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logging.info("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ ===")

if __name__ == "__main__":
    main()